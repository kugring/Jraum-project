name: Deploy to EC2 and S3

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 실행

jobs:
  deploy-backend:
    runs-on: ubuntu-latest  # 백엔드 배포를 실행할 환경
 
    steps: 
      # 1. GitHub 레포지토리의 코드를 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. AWS 자격 증명 설정 (IAM 역할을 통해 접근)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS Access Key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS Secret Key
          aws-region: ${{ secrets.AWS_REGION }}  # AWS Region

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 빌드 실행
      - name: Build with Gradle
        run: |
          cd back
          ./gradlew build  

      # 빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: jraumServer
          path: back/build/libs/jraum-0.0.1-SNAPSHOT.jar

      # 3. AWS SSM을 사용하여 EC2에 JAR 파일 배포
      - name: Deploy JAR to EC2 using SSM
        uses: aws-actions/aws-ssm-execute-command@v1
        with:
          document-name: "AWS-RunShellScript"  # EC2에 실행할 쉘 스크립트
          targets: "InstanceIds=${{ secrets.EC2_INSTANCE_ID }}"  # EC2 인스턴스 ID
          parameters: '{"commands":["sudo rm -f /home/ubuntu/Jraum-project/build/libs/*.jar", "curl -L -o /home/ubuntu/Jraum-project/build/libs/jraum-0.0.1-SNAPSHOT.jar https://github.com/${{ github.repository }}/actions/artifacts/${{ github.run_id }}/download?name=jraumServer", "sudo nohup java -jar /home/ubuntu/Jraum-project/build/libs/jraum-0.0.1-SNAPSHOT.jar > /home/ubuntu/Jraum-project/application.log 2>&1 &"]}'

  deploy-frontend:
    runs-on: ubuntu-latest  # 프론트엔드 배포를 실행할 환경
    needs: deploy-backend  # 백엔드 배포가 완료된 후 실행

    steps:
      # 1. GitHub 레포지토리의 코드를 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. React 프로젝트 빌드
      - name: Build React project
        run: |
          cd front  # React 프로젝트 디렉토리로 이동
          npm install  # 의존성 설치
          npm run build  # 빌드 실행 (결과물은 front/build 디렉토리에 생성)

      # 3. 빌드된 정적 파일을 S3에 업로드
      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl public-read --delete  # 업로드 시 퍼블릭 권한 설정, 불필요한 파일 삭제
        env:
          AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}  # S3 버킷 이름
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS Access Key ID
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS Secret Access Key
          AWS_REGION: ${{ secrets.AWS_REGION }}  # S3 버킷이 위치한 AWS 리전 (예: ap-northeast-2)
