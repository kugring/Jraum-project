name: Deploy to EC2 and S3

on:
  push:
    branches: 
      - main

jobs: 
  deploy-backend: 
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 레포지토리의 코드를 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. AWS 자격 증명 설정 (IAM 역할을 통해 접근)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 4. Gradle 빌드 실행
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.6.0
        with:
          gradle-version: '8.3'
          build-root-directory: ./back  # 백엔드 프로젝트 디렉토리
          arguments: build

      # 빌드 후 디렉토리 확인
      - name: Check build directory contents
        run: |
          if [ -d "./back/build" ]; then
            echo "Build directory exists"
            ls -la ./back/build/
          else
            echo "Build directory does not exist"
          fi

      # 5. SSH 설정 (비밀키를 사용하여 연결)
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # 6. EC2에서 기존 build 폴더 삭제
      - name: Remove existing build folder on EC2
        run: |
          ssh ubuntu@${{ secrets.EC2_HOST }} << EOF
          rm -rf /home/ubuntu/build
          mkdir -p /home/ubuntu/build
          EOF

      # 7. EC2로 새로 빌드된 파일 전송
      - name: Copy build folder to EC2
        run: |
          scp -r ./back/build/ ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/build/

      # 8. EC2에서 JAR 파일 실행 (예: Spring Boot)
      - name: Run backend on EC2
        run: |
          ssh ubuntu@${{ secrets.EC2_HOST }} << EOF
          pkill -f 'java -jar' || true
          nohup java -jar /home/ubuntu/build/libs/jraum-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
          EOF


  deploy-frontend:
    runs-on: ubuntu-latest  # 프론트엔드 배포를 실행할 환경
    needs: deploy-backend  # 백엔드 배포가 완료된 후 실행

    steps:
    
    # 1. GitHub 레포지토리의 코드를 체크아웃
    - name: Checkout code
      uses: actions/checkout@v3
  
    # 2. React 프로젝트 빌드
    - name: Disable CI
      run: echo "CI=false" >> $GITHUB_ENV
    
    - name: Build React project
      run: |
        cd front
        npm install
        npm run build
  
    # 3. 빌드된 정적 파일을 S3에 업로드
    - name: Deploy to S3
      run: |
        aws s3 sync ${{ github.workspace }}/front/build/ s3://${{ secrets.S3_BUCKET }} \
          --acl public-read --delete
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

