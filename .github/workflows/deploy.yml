name: Deploy to EC2 and S3

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 실행

jobs:
  deploy-backend:
    runs-on: ubuntu-latest  # 백엔드 배포를 실행할 환경

    steps:
      # 1. GitHub 레포지토리의 코드를 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # JDK 17 설정한다
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
  
      # gradle wrapper 파일에 실행 권한을 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
  
      # Gradle 빌드 엑션을 이용해서 프로젝트 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.6.0
        with:
          arguments: build
  
      # 빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드!!
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: jraumServer
          path: build/libs/jraum-0.0.1-SNAPSHOT.jar

      # 2. SSH를 사용하여 EC2에 JAR 파일만 전달
      - name: Deploy JAR to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}  # EC2 서버 IP 또는 도메인
          username: ${{ secrets.EC2_USER }}  # EC2 사용자 (예: ubuntu)
          key: ${{ secrets.EC2_PRIVATE_KEY }}  # SSH 개인 키
          script: |
            # 기존 JAR 파일 삭제
            sudo rm -f /home/ubuntu/Jraum-project/build/libs/*.jar
            # GitHub 아티팩트에서 JAR 파일 다운로드
            curl -L -o /home/ubuntu/Jraum-project/build/libs/jraum-0.0.1-SNAPSHOT.jar https://github.com/${{ github.repository }}/actions/artifacts/${{ github.run_id }}/download?name=jraumServer
            # 새로운 JAR 파일 실행
            sudo nohup java -jar /home/ubuntu/Jraum-project/build/libs/jraum-0.0.1-SNAPSHOT.jar > /home/ubuntu/Jraum-project/application.log 2>&1 &

  deploy-frontend:
    runs-on: ubuntu-latest  # 프론트엔드 배포를 실행할 환경
    needs: deploy-backend  # 백엔드 배포가 완료된 후 실행

    steps:
      # 1. GitHub 레포지토리의 코드를 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. React 프로젝트 빌드
      - name: Build React project
        run: |
          cd front  # React 프로젝트 디렉토리로 이동
          npm install  # 의존성 설치
          npm run build  # 빌드 실행 (결과물은 front/build 디렉토리에 생성)

      # 3. 빌드된 정적 파일을 S3에 업로드
      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl public-read --delete  # 업로드 시 퍼블릭 권한 설정, 불필요한 파일 삭제
        env:
          AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}  # S3 버킷 이름
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS Access Key ID
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS Secret Access Key
          AWS_REGION: ${{ secrets.AWS_REGION }}  # S3 버킷이 위치한 AWS 리전 (예: ap-northeast-2)
